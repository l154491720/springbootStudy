一、概述
	spring Boot提供的自动配置和无XML化，使得构建安全的Web应用变得非常容易，本文将演示如何使用Spring Boot和Spring Security构建基于角色的访问控制(RBAC).
	
二、什么事RBAC，即基于角色的访问控制
	Role Based Access Control,就是用户通过角色与权限进行关联。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。这样就构造成"用户-角色-权限"的授权模型。在这种模型中，用户与角色
	之间，一般是多对多的关系。
	
	当用户的数量非常大时，要给系统每个用户逐一授权(授角色)，是非常繁琐的事情。这样，就需要给用户分组，每个用户组内有多个用户。除了可以给用户授权外，还可以给用户组授权。这样一来，用户
	拥有的所有权限，就是用户个人拥有的权限与该用户组拥有的权限之和。
	
	在应用系统中，权限表现成什么？对功能模块的操作，对上传文件的删改，菜单的访问，甚至页面上某个按钮，某个图片的可见性控制，都可属于权限的范畴。有限权限设计，会把功能操作为一类，而把
	文件、菜单、页面元素等作为另一类，这样就构成"用户-角色-权限-资源"的授权模型，而在做数据表建模时，可以把功能操作和系统资源统一管理，也就是直接与权限表进行关联，这样更具便捷性和
	易扩展行。
	
	请留意权限表中有一列"权限类型"，我们根据它的取值来区分是哪一类权限，如"MENU"表示菜单的访问权限，"OPERATUIB"表示功能模块的操作权限、"FILE"表示文件的修改权限，"ELEMENT"表示页面元素的可见性等。
	
	这样设计的好处有二。其一，不需要区分哪些是权限操作，哪些是资源(实际上，有时候也不好区分，如菜单，把它理解为资源呢还是功能模块权限呢？)。其二，方便扩展，当你要对新的东西进行权限控制时，我们
	只需要建立一个新的关联表"权限xxx关联表",并且定这类权限的权限类型字符串。
	
	这里要注意的是，权限表与权限菜单关联表，是一对一的关系。(文件、页面权限、功能操作等同理)。也就是添加一个菜单，就得同时往这三个表中插入一条记录。这样，可以不需要权限菜单关联表，让权限与
	菜单直接关联，此时，须在权限表中新增一列用来保存菜单的ID，权限表通过"权限类型"和这个ID来区分是种类型下的哪些记录。
	 
	 