Spirng Boot学习
	Spring Boot是为了简化Spring应用的创建、运行、调试、部署等而出现的，使用它可以做到专注于Spring应用的开发，而无需过多关注XML的配置。简单来说，它提供了一堆依赖打包，并已经按照习惯解决了依赖问题
	---习惯大于约定
	
	Spring Boot默认使用tomcat作为服务器，使用logBack提供日志记录。
	
前提：
	spring Boot提供了一系列的依赖包，所以需要构建工具的支持：maven或gradle
	
使用：
	①新建一个maven项目 ②pom中parent设为spring-boot-start-parent③添加应用需要的starter模块，作为示例，我们仅添加Web starter模块。
	○ spring-web, spring-webmvc            Spring WebMvc框架
	○ tomcat-embed-*                              内嵌Tomcat容器
	○ jackson                                             处理json数据
	○ spring-*                                            Spring框架
	○ spring-boot-autoconfigure             Spring Boot提供的自动配置功能
	
	换句话说，当你添加了相应的starter模块，就相当于添加了相应的所有依赖的打包。
	
	④保存pom，刷新maven，以便刷新依赖导入
	⑤可以开始写Controller。
	
	package cn.larry.spring.controller;

	import org.springframework.boot.SpringApplication;
	import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
	import org.springframework.stereotype.Controller;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.ResponseBody;

	@Controller
	@EnableAutoConfiguration
	public class SampleController {
	
		@RequestMapping("/")
		@ResponseBody
		String home() {
			return "Hello World!";
		}

		public static void main(String[] args) throws Exception {
			SpringApplication.run(SampleController.class, args);
		}
	}
	
	这里有两个新东西:@EnableAutoConfiguration和SpringApplication
	@EnableAutoConfiguration用于自动配置。简单的说，它会根据你的pom配置(实际上应该根据具体的依赖)来判断这是一个什么应用，并创建相应的环境。
	在上面这个例子中，@EnableAutoConfiguration会判断出这是一个Web应用，所以会创建相应的Web环境。
	
	springApplication则是从main方法启动Spring应用的类。默认，他会执行以下步骤：
	1.创建一个合适的ApplicationContext实例(取决于classpath)
	2.注册一个CommandLinePropertySource，以便将命令行参数作为Spring properties
	3.刷新application context，加载所有单例的beans。
	4.激活所有CommandLineRunner beans
	默认，直接使用SpringApplication的静态方法run()即可。但也可以创建实例，并自行配置需要的设置。
	
	⑥右键启动main方法即可。启动信息(包括关系信息)；⑦默认访问地址：http://localhost:8080/ 可以在classpath下的application.properties或者application.yaml文件中设置即可。